////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(num1, num2, step) {
  let arr = [];
  if(num1 === num2){
    return arr;
  } 
  if (!step) {
      step = 1;
  }
  if((num1 <= num2) && (step >= 1)){
  for (num1; num1 <= num2; num1+= step) {
        arr.push(num1);
      } 
  }else if((num1 <= num2) && (step < 0)){
    for (num1; num1 <= num2; num1 -= step){
      return arr;
    }
  } else if ((step < 0) && (num1 >= num2)){
    for (num1; num1 >= num2; num1-= step){
      arr.push(num1);
    }
  }
  return arr;

  // return arr;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  var count = 0;
  for(let i = 0; i < array.length; i++){
    count += array[i];
  }
  return count;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let arr = [];
  for(let i = 0; i < array.length; i++){
    arr.push(array[i]);
  }
  return arr.reverse();
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function reverseArrayInPlace(array) {
  for (let i = 0; i < Math.round(array.length / 2); i++){
    let arr = [];
    arr.push(array[array.length - 1 - i])
    arr.unshift(array[i]);
    array[i] = arr[1];
    array[array.length -1 - i] = arr[0];
    //console.log(arr);
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  var list = null;
  let array1 = array.reverse();
  let list2 = function(array1){
    array1.forEach(function(element){
      list = {
        value: element,
        rest: list
      };
    })
  };
  list2(array1);
  return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  let arr = [];
  for (let node = list; node; node = node.rest){
    arr.push(node.value);
  }
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
  return list = {
    value: element,
    rest: list
  }
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, number) {
  if(number === 0){
    return 1;
  }
  for(let node = list; node; node = node.rest){
    if(node['value'] === number){
      return node['value'] += 1;
    }
  }
}


////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(obj1, obj2) {
  if (obj1 === obj2) {
    return true;
  }
  else if ((typeof obj1 == "object" && obj2 != null) && (typeof obj2 == "object" && obj2 != null)) {
    if (Object.keys(obj1).length != Object.keys(obj2).length)
      return false;

    for (var prop in obj1) {
      if (obj2.hasOwnProperty(prop))
      {  
        if (! deepEqual(obj1[prop], obj2[prop]))
          return false;
      }
      else
        return false;
    }
    return true;
  }
  else 
    return false;
}
  
  
  
  


////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
